::::::::::::::::::::
CURSO GIT BASICO 
::::::::::::::::::::

NOTAS:
Podemos crear un archivo llamado ".gitignore" para que cuando guardemos los cambios en el repositorio, se ignores ciertos archivos. 
Simplemente en ese gitignore agregamos los nombres de los archivos con su extensi√≥n.

COMANDOS:
primero, boton derecho sobre la carpeta del proyecto, "GIT bash here", para abrir consola en el proyecto donde estamos trabajando.

-git init: iniciamos proyecto git en la carpeta donde estamos posicionados.
-git status: nos muesta los cambios que hicimos en algun archivo y no guardamos aun.
-git log: nos muestra todos los snapshots que creamos en el tiempo, las versiones.
-git add: agregar o guardar los nuevos cambios que hicimos. add "." guarda varios archivos.
-git commit: agrega un snapshot o imagen con los cambios hasta ese momento, con la fecha, etc.
    Tambien se puede usar "git commit -m 'NombreDelCommit' " para asignarle un identificador directamente.
-git branch "nombre": creamos una nueva "rama", donde podemos agregar archivos y cambios que solo estaran en esta rama, 
    y no en la master u otras ramas que vayamos creando. subcomandos serian: 
-para crear nueva rama: "git branch rama1" 
-listar ramas: "git branch" 
-para moverse a una rama: "git checkout nombreDeRama" .
-git branch -d "nombre": para eliminar una rama.
-git push -u origin master : creamos la rama "MASTER" y subimos a esa rama los cambios.
-git push origin --delete <NombreRama>: eliminar rama remota.
-vinculamos proyecto a github: ej.: "git remote add origin https://github.com/wmigue/curso-js.git"
-subimos proyecto a determinada rama: "git push --set-upstream origin master" donde master es la rama o branch seleccionada.
-git clone "ruta": para clonar algun repositorio.
-git reset --hard HEAD~3 : sirve para eliminar en este caso los ultimos 3 commits. luego con "git push --force" forzamos la actualizacion en github.
    Luego es necesario borrar el historial de github con: git push -f origin master.
-CUANDO NO FUNCIONA EL .gitignore hacer:  git rm -f --cached "nombre de archivo que no cambia"
-git push -f origin master: cuando tenemos el problema -> hint: Updates were rejected because the remote contains work that you do
-Para actualizar tu rama "xxx" con contenido de la rama "master", te situas en la rama "xxx":
    git checkout xxx
    git merge master: trae los commits de "master".
    git pull: te queda tu rama xxx como copia exacta de master. (usar -f para forzar en caso de error.)
-para clonar solo una RAMA(single-branch) y una CANTIDAD(depth) de commits a partir del ultimo generado:
    git clone -b master --single-branch https://github.com/wmigue/socket.io-express.js --depth 1
-para moverse a un determinado commit: git checkout "hash" y para volver al head(ultimo commit): git switch - 
-git stash save "nombre" : guarda un estado para poder cambiar entre ramas sin tener que hacer un commit o postergarlo.
-git stash drop stash@{0} : eliminando un stash, en este caso el 0.
-git stash list : listando stashes.
-git stash pop stash@{0} : aplica los cambio y elimina los archivos del stash.
-git stash apply stash@{0} : aplica los cambios y deja una copia en el stash.